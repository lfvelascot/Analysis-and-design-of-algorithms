package Ventanas;

import Grafo.Grafo;
import java.awt.Frame;

/**
 *
 * @author Luis Felipe Velasco Tao
 */
public class Matrices extends javax.swing.JFrame {

    /**
     * Creates new form Matrices
     */
    Grafo grafo; // Grafo en uso
    Frame frame; // Marco en el que se va a imprimir la matriz

    /**
     * +
     *
     * @param n
     * @param grafo // Arreglo en donde se almacena el grafo
     * @param matriz // Matriz la cual se va a imprimir (seleccionada por medio
     * del menu desplegable : 1 para la matriz adyacencia y 2 para la matriz de
     * coeficientes)
     * @param frame // Marco en el que se imprime la matriz
     */
    public Matrices(int n, Grafo grafo, int matriz, Frame frame) {
        this.n = n;
        this.grafo = grafo;
        this.frame = frame;
        initComponents();
        if (matriz == 1) { // Si la matriz seleccionada es 1 = Adyacencia
            // Se inicializan las variables de iteración para las matrices
            int i;
            int j = 0;
            // BucleFor el cual ayudara a recorrer las matrices en el eje X
            for (i = 0; i < n + 1; i++) {
                // Condicional que ayuda a evaluar donde se añadiran los indices de filas en el grafo
                if (i == 0 && j == 0) {
                    jTextArea1.append("X\t"); // Posicion 0.0 nula
                } else {
                    jTextArea1.append((i - 1) + "|\t");
                }
                // Bucle For el cual ayudara a recorrer las matrices en el eje Y
                for (j = 0; j < n; j++) {
                // Condicional que ayuda a evaluar donde se añadiran los indices de columnas en el grafo   
                    if (i == 0 && j > 0) {
                        jTextArea1.append("|" + (j - 1) + "|\t");
                    } else if (i > 0 && j > 0) {
                        //Impresion de los valores de la matriz
                        jTextArea1.append("" + grafo.getMatrizAdyacencia(i - 1, j - 1) + "\t");
                    }
                }
                jTextArea1.append("\n");
            }
        }
        if (matriz == 2) { // Si la matriz seleccionada es 2 = Coeficientes
            // Se inicializan las variables de iteración para las matrices
            int i;
            int j = 0;
            // BucleFor el cual ayudara a recorrer las matrices en el eje X
            for (i = 0; i < n + 1; i++) {
                 // Condicional que ayuda a evaluar donde se añadiran los indices de filas en el grafo
                if (i == 0 && j == 0) {
                    jTextArea1.append("X\t");// Posicion 0.0 nula
                } else {
                    jTextArea1.append((i - 1) + "|\t");
                }
                // Bucle For el cual ayudara a recorrer las matrices en el eje Y
                for (j = 0; j < n; j++) {
                    if (i == 0 && j > 0) {
                        jTextArea1.append("|" + (j - 1) + "|\t");
                    } else if (i > 0 && j > 0) {
                        //Impresion de los valores de la matriz
                        jTextArea1.append("" + grafo.getMatrizCoeficiente(i - 1, j - 1) + "\t");
                    }
                }
                jTextArea1.append("\n");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("MATRIZ"));
        jPanel1.setLayout(null);

        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(255, 255, 255));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextArea1.setRows(7);
        jTextArea1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 50, 580, 380);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("M A T R I Z");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(31, 20, 570, 22);

        setSize(new java.awt.Dimension(635, 494));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        frame.setEnabled(true);        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Matrices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Matrices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Matrices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Matrices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }
    int n;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
